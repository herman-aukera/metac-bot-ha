name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  workflow-lint:
    name: Lint GitHub Workflows
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install actionlint
        run: |
          mkdir -p ./bin
          curl -sSL https://raw.githubusercontent.com/rhysd/actionlint/main/scripts/download-actionlint.bash | bash -s -- latest ./bin
      - name: Run actionlint
        run: |
          ./bin/actionlint -color
  kickoff:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Kickoff
        run: echo "Workflow started for ${{ github.event_name }} on ${{ github.ref }}"

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry with timeout and fallback
        id: install-poetry-cicd
        timeout-minutes: 5
        continue-on-error: true
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Fallback to pip installation if poetry fails
        if: steps.install-poetry-cicd.outcome == 'failure'
        timeout-minutes: 10
        run: |
          echo "Poetry installation failed, falling back to pip..."
          python -m pip install --upgrade pip --timeout 60 --retries 3
          python -m pip install --timeout 60 --retries 3 poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Load cached venv with timeout
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        timeout-minutes: 5

      - name: Validate Poetry configuration (no lock)
        timeout-minutes: 5
        run: |
          poetry --version
          poetry check || true

      - name: Install dependencies with retry and fallback
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        timeout-minutes: 20
        run: |
          # Try poetry install first
          for i in {1..3}; do
            echo "Attempt $i to install dependencies with poetry..."
            if timeout 600 poetry install --no-interaction --no-root; then
              echo "Poetry install successful on attempt $i"
              break
            elif [ $i -eq 3 ]; then
              echo "Poetry install failed after 3 attempts; trying without lock and then pip fallback..."
              poetry install --no-interaction --no-root --no-ansi --no-cache || true
              python -m pip install --timeout 60 --retries 3 \
                flake8 black isort mypy pytest pytest-cov \
                pydantic requests python-dotenv pyyaml openai typer
              break
            else
              echo "Poetry install failed on attempt $i, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Install project with retry
        timeout-minutes: 10
        run: |
          if command -v poetry &> /dev/null && poetry env info &> /dev/null; then
            for i in {1..3}; do
              echo "Attempt $i to install project with poetry..."
              if timeout 300 poetry install --no-interaction; then
                echo "Project install successful on attempt $i"
                exit 0
              fi
              echo "Project install failed on attempt $i, retrying in 15 seconds..."
              sleep 15
            done
            echo "Project install failed after 3 attempts, using fallback without editable install"
            echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
          else
            echo "Skipping editable install (package-mode=false); adding src to PYTHONPATH"
            echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
          fi

      - name: Configure runner commands
        run: |
          if command -v poetry &> /dev/null && poetry env info &> /dev/null; then
            echo "Using poetry run"
            echo "PY_CMD=poetry run" >> $GITHUB_ENV
          else
            echo "Using python -m"
            echo "PY_CMD=python -m" >> $GITHUB_ENV
            echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
          fi

      - name: Run linting
        run: |
          $PY_CMD flake8 src tests
          $PY_CMD black --check src tests || echo "black formatting issues detected (non-fatal)"
          $PY_CMD isort --check-only src tests || echo "isort formatting issues detected (non-fatal)"

      - name: Run type checking
        run: $PY_CMD mypy src || echo "mypy completed with issues"

      - name: Run unit tests
        run: $PY_CMD pytest tests/unit -v -m "not external and not slow" --cov=src --cov-report=xml

      - name: Run integration tests
        continue-on-error: true
        run: $PY_CMD pytest tests/integration -v -m "not external and not slow" || echo "integration tests failed (non-fatal)"

      - name: Run e2e tests (non-fatal)
        continue-on-error: true
        run: $PY_CMD pytest tests/e2e -v || echo "e2e tests failed (non-fatal)"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Run dependency check
        run: |
          pip install safety bandit
          safety check --json --output safety-report.json || true
          bandit -r src -f json -o bandit-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop') }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/develop' && vars.ENABLE_DEPLOY == 'true'
    environment: staging

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment"
          # Add staging deployment logic here
          docker-compose -f docker-compose.staging.yml up -d

      - name: Run smoke tests
        run: |
          echo "Running smoke tests"
          # Add smoke test logic here
          sleep 30
          curl -f http://staging.forecasting-bot.com/health

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.ref == 'refs/heads/main' && vars.ENABLE_DEPLOY == 'true'
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Blue-Green Deployment
        run: |
          echo "Starting blue-green deployment"
          # Blue-green deployment logic
          ./scripts/blue-green-deploy.sh ${{ needs.build.outputs.image-tag }}

      - name: Health Check
        run: |
          echo "Performing health checks"
          ./scripts/health-check.sh

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed, rolling back"
          ./scripts/rollback.sh
