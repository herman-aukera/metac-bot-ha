name: Budget Monitoring and Cost Tracking

on:
  schedule:
    # Run budget monitoring every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      force_report:
        description: 'Force generate comprehensive budget report'
        required: false
        default: 'false'
        type: boolean
      check_suspension:
        description: 'Check if workflows should be suspended due to budget'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: budget-monitoring
  cancel-in-progress: false # Don't cancel budget monitoring

jobs:
  budget_monitoring:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      budget_status: ${{ steps.budget_analysis.outputs.budget_status }}
      should_suspend: ${{ steps.budget_analysis.outputs.should_suspend }}
      utilization: ${{ steps.budget_analysis.outputs.utilization }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Validate Poetry configuration (no lock)
        run: |
          poetry --version
          poetry check || true

      - name: Install dependencies with retry and fallback
        run: |
          set -e
          echo "Attempting dependency installation via Poetry..."
          for i in {1..2}; do
            echo "Attempt $i"
            if poetry install --no-interaction --no-root; then
              echo "Poetry install successful"
              break
            elif [ $i -eq 2 ]; then
              echo "Poetry install failed after $i attempts; falling back to pip"
              python -m pip install --upgrade pip --timeout 60 --retries 3
              if [ -f requirements-emergency.txt ]; then
                python -m pip install --timeout 60 --retries 3 -r requirements-emergency.txt || true
              fi
              python -m pip install --timeout 60 --retries 3 \
                pydantic requests python-dotenv pyyaml openai httpx typer pytest || true
            else
              echo "Retrying in 15s..."
              sleep 15
            fi
          done

          # Configure portable Python runner
          if poetry env info >/dev/null 2>&1; then
            echo "PY_RUN=poetry run python" >> $GITHUB_ENV
          else
            echo "PY_RUN=python" >> $GITHUB_ENV
            echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
          fi

      - name: Comprehensive budget analysis
        id: budget_analysis
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "💰 Running comprehensive budget analysis..."

          # Generate all artifacts
          $PY_RUN scripts/deployment_cost_monitor.py --generate-artifacts

          # Get the analysis report
          REPORT=$($PY_RUN scripts/deployment_cost_monitor.py --json-output)

          # Extract key metrics safely
          BUDGET_STATUS=$(echo "$REPORT" | jq -r '.budget_status.status // "normal"' 2>/dev/null || echo "normal")
          UTILIZATION=$(echo "$REPORT" | jq -r '.budget_status.utilization // 0' 2>/dev/null || echo "0")
          REMAINING=$(echo "$REPORT" | jq -r '.budget_status.remaining // 100' 2>/dev/null || echo "100")
          SPENT=$(echo "$REPORT" | jq -r '.budget_status.spent // 0' 2>/dev/null || echo "0")
          SHOULD_SUSPEND=$(echo "$REPORT" | jq -r '.actions.should_suspend_workflows // false' 2>/dev/null || echo "false")
          SHOULD_ALERT=$(echo "$REPORT" | jq -r '.actions.should_send_alerts // false' 2>/dev/null || echo "false")

          # Set outputs
          echo "budget_status=$BUDGET_STATUS" >> $GITHUB_OUTPUT
          echo "should_suspend=$SHOULD_SUSPEND" >> $GITHUB_OUTPUT
          echo "utilization=$UTILIZATION" >> $GITHUB_OUTPUT
          echo "remaining_budget=$REMAINING" >> $GITHUB_OUTPUT
          echo "should_alert=$SHOULD_ALERT" >> $GITHUB_OUTPUT

          # Display the report
          $PY_RUN scripts/deployment_cost_monitor.py

          # Save as budget monitoring report
          echo "$REPORT" > budget_monitoring_report.json
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Generate cost per run analysis
        run: |
          sudo apt-get update && sudo apt-get install -y jq
          echo "📊 Analyzing cost per workflow run..."

          # Generate cost analysis using the monitoring script
          $PY_RUN scripts/deployment_cost_monitor.py --cost-analysis

          # Save the analysis to the expected file
          $PY_RUN scripts/deployment_cost_monitor.py --cost-analysis --json-output > cost_per_run_analysis.json

          echo "📄 Cost analysis saved to cost_per_run_analysis.json"
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Check workflow suspension requirements
        if: github.event.inputs.check_suspension != 'false'
        run: |
          echo "🔍 Checking if workflows should be suspended..."

          if [ "${{ steps.budget_analysis.outputs.should_suspend }}" == "true" ]; then
            echo "🚨 WORKFLOW SUSPENSION REQUIRED"
            echo "Budget utilization: ${{ steps.budget_analysis.outputs.utilization }}"
            echo "Remaining budget: ${{ steps.budget_analysis.outputs.remaining_budget }}"
            echo ""
            echo "🛑 IMMEDIATE ACTIONS REQUIRED:"
            echo "1. Disable all scheduled tournament workflows"
            echo "2. Cancel any running workflow instances"
            echo "3. Switch to manual forecasting mode only"
            echo "4. Review budget allocation and optimization opportunities"
            echo ""
            echo "To disable workflows, update repository settings or modify cron schedules."
          else
            echo "✅ Budget status allows continued automated operation"
            echo "Current utilization: ${{ steps.budget_analysis.outputs.utilization }}"
            echo "Status: ${{ steps.budget_analysis.outputs.budget_status }}"
          fi

      - name: Generate budget alerts
        if: steps.budget_analysis.outputs.should_alert == 'true'
        run: |
          echo "🚨 BUDGET ALERT GENERATED"
          echo "Alert Level: ${{ steps.budget_analysis.outputs.should_suspend == 'true' && 'CRITICAL' || 'WARNING' }}"
          echo "Budget Utilization: ${{ steps.budget_analysis.outputs.utilization }}"
          echo "Remaining Budget: ${{ steps.budget_analysis.outputs.remaining_budget }}"
          echo "Status: ${{ steps.budget_analysis.outputs.budget_status }}"
          echo ""

          if [ "${{ steps.budget_analysis.outputs.should_suspend }}" == "true" ]; then
            echo "🔴 CRITICAL ALERT: Budget exhausted - immediate action required"
            echo "Recommended: Suspend all automated workflows"
          else
            echo "🟡 WARNING ALERT: High budget utilization detected"
            echo "Recommended: Monitor closely and consider conservative mode"
          fi

      - name: Upload monitoring reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: budget-monitoring-${{ github.run_number }}-${{ steps.budget_analysis.outputs.budget_status }}
          path: |
            budget_monitoring_report.json
            cost_per_run_analysis.json
            *.log
          retention-days: 90

      - name: Summary report
        if: always()
        run: |
          echo "📊 BUDGET MONITORING SUMMARY"
          echo "=" * 50
          echo "🕐 Monitoring Time: $(date)"
          echo "💰 Budget Status: ${{ steps.budget_analysis.outputs.budget_status }}"
          echo "📊 Utilization: ${{ steps.budget_analysis.outputs.utilization }}"
          echo "💵 Remaining: ${{ steps.budget_analysis.outputs.remaining_budget }}"
          echo "🚨 Should Suspend: ${{ steps.budget_analysis.outputs.should_suspend }}"
          echo "⚠️ Should Alert: ${{ steps.budget_analysis.outputs.should_alert }}"
          echo ""
          echo "📄 Reports uploaded as workflow artifacts"
          echo "🔍 Check artifacts for detailed analysis"

  workflow_suspension_check:
    needs: budget_monitoring
    if: needs.budget_monitoring.outputs.should_suspend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Critical budget exhaustion notification
        run: |
          echo "🚨 CRITICAL: BUDGET EXHAUSTED - WORKFLOW SUSPENSION REQUIRED"
          echo ""
          echo "📊 Current Status:"
          echo "  Budget Status: ${{ needs.budget_monitoring.outputs.budget_status }}"
          echo "  Utilization: ${{ needs.budget_monitoring.outputs.utilization }}"
          echo "  Remaining: ${{ needs.budget_monitoring.outputs.remaining_budget }}"
          echo ""
          echo "🛑 REQUIRED ACTIONS:"
          echo "1. Immediately disable scheduled workflows:"
          echo "   - run_bot_on_tournament.yaml"
          echo "   - tournament_deadline_aware.yaml"
          echo "   - Any other automated forecasting workflows"
          echo ""
          echo "2. Cancel any currently running workflow instances"
          echo ""
          echo "3. Switch to manual forecasting mode for critical deadlines only"
          echo ""
          echo "4. Review and implement cost optimization measures"
          echo ""
          echo "5. Consider emergency budget increase if tournament participation is critical"
          echo ""
          echo "⚠️ This workflow will continue to fail until budget issues are resolved"
          echo "   to prevent accidental re-enabling of automated workflows."

          # Fail the workflow to prevent accidental continuation
          exit 1

      - name: Disable workflows notification
        if: failure()
        run: |
          echo "💡 To disable workflows, either:"
          echo "1. Comment out or remove cron schedules in workflow files"
          echo "2. Disable workflows in GitHub repository settings"
          echo "3. Set repository variables to control scheduling"
          echo ""
          echo "🔧 Example: Set BUDGET_EXHAUSTED=true in repository variables"
          echo "   and add conditions to workflow triggers"
