# Network Resilience Configuration for GitHub Actions
# This file contains reusable configurations for network timeout handling

name: Network Resilience Utilities

# Reusable workflow for network-resilient Python setup
on:
  workflow_call:
    inputs:
      python-version:
        required: false
        type: string
        default: '3.11'
      timeout-minutes:
        required: false
        type: number
        default: 20
      enable-emergency-mode:
        required: false
        type: boolean
        default: true

jobs:
  setup-python-resilient:
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.timeout-minutes }}

    outputs:
      setup-method: ${{ steps.determine-method.outputs.method }}
      poetry-available: ${{ steps.determine-method.outputs.poetry-available }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        timeout-minutes: 5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ inputs.python-version }}
        timeout-minutes: 5

      - name: Install poetry with timeout and fallback
        id: install-poetry
        timeout-minutes: 5
        continue-on-error: true
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Fallback to pip installation if poetry fails
        if: steps.install-poetry.outcome == 'failure'
        timeout-minutes: 10
        run: |
          echo "Poetry installation failed, falling back to pip..."
          python -m pip install --upgrade pip --timeout 60 --retries 3
          python -m pip install --timeout 60 --retries 3 poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Determine setup method
        id: determine-method
        run: |
          if command -v poetry &> /dev/null && poetry --version; then
            echo "method=poetry" >> $GITHUB_OUTPUT
            echo "poetry-available=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Poetry is available"
          else
            echo "method=pip" >> $GITHUB_OUTPUT
            echo "poetry-available=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è Using pip fallback"
          fi

      - name: Install dependencies with network resilience
        timeout-minutes: ${{ inputs.timeout-minutes }}
        run: |
          if [ "${{ steps.determine-method.outputs.method }}" == "poetry" ]; then
            echo "üîÑ Installing dependencies with Poetry..."

            # Try poetry lock with retries
            for i in {1..3}; do
              echo "Attempt $i to update poetry lock file..."
              if timeout 300 poetry lock; then
                echo "Poetry lock successful on attempt $i"
                break
              elif [ $i -eq 3 ]; then
                echo "Poetry lock failed after 3 attempts, continuing with existing lock file"
                break
              else
                echo "Poetry lock failed on attempt $i, retrying in 30 seconds..."
                sleep 30
              fi
            done

            # Try poetry install with retries
            for i in {1..3}; do
              echo "Attempt $i to install dependencies with poetry..."
              if timeout 600 poetry install --no-interaction; then
                echo "Poetry install successful on attempt $i"
                exit 0
              elif [ $i -eq 3 ]; then
                echo "Poetry install failed after 3 attempts"
                if [ "${{ inputs.enable-emergency-mode }}" == "true" ]; then
                  echo "üö® Enabling emergency pip fallback..."
                  break
                else
                  exit 1
                fi
              else
                echo "Poetry install failed on attempt $i, retrying in 30 seconds..."
                sleep 30
              fi
            done
          fi

          # Emergency pip fallback
          if [ "${{ steps.determine-method.outputs.method }}" == "pip" ] || [ "${{ inputs.enable-emergency-mode }}" == "true" ]; then
            echo "üö® Using emergency pip installation..."
            python -m pip install --timeout 60 --retries 3 \
              pytest pytest-cov pytest-asyncio pytest-timeout \
              flake8 black isort mypy pylint \
              pydantic requests python-dotenv pyyaml \
              openai anthropic httpx aiohttp \
              beautifulsoup4 numpy pandas
            echo "‚úÖ Emergency dependencies installed"
          fi

# Alternative runner configurations for network issues
env:
  # Network timeout configurations
  PIP_TIMEOUT: 60
  PIP_RETRIES: 3
  POETRY_TIMEOUT: 600

  # Emergency mode configurations
  EMERGENCY_DEPENDENCIES: |
    pytest pytest-cov flake8 black isort mypy
    pydantic requests python-dotenv pyyaml
    openai anthropic httpx aiohttp

  # Retry configurations
  MAX_RETRIES: 3
  RETRY_DELAY: 30
  COMMAND_TIMEOUT: 300
