name: Forecast on new AI tournament questions

on:
  workflow_dispatch:
    inputs:
      scheduling_frequency_hours:
        description: 'Override scheduling frequency in hours'
        required: false
        default: '4'
        type: string
      tournament_mode:
        description: 'Tournament operation mode'
        required: false
        default: 'normal'
        type: choice
        options:
          - normal
          - critical
          - final_24h
  # Optimized tournament scheduling - runs every 4 hours for sustainable operation
  # Configurable scheduling based on tournament phase and budget constraints
  # For deadline-aware scheduling, use the tournament_deadline_aware.yaml workflow
  schedule:
    - cron: '0 */4 * * *' # Every 4 hours for sustainable tournament operation

# Optimized concurrency control for tournament scheduling
concurrency:
  group: tournament-forecasting
  cancel-in-progress: true # Cancel previous runs to avoid queue buildup

# Job to run the tournament forecast bot
jobs:
  tournament_forecast:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging workflows
    strategy:
      fail-fast: false # Continue even if one attempt fails
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install poetry with timeout and fallback
        id: install-poetry-tournament
        timeout-minutes: 5
        continue-on-error: true
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Fallback to pip installation if poetry fails
        if: steps.install-poetry-tournament.outcome == 'failure'
        timeout-minutes: 10
        run: |
          echo "üö® Poetry installation failed, falling back to pip for tournament..."
          python -m pip install --upgrade pip --timeout 60 --retries 3
          python -m pip install --timeout 60 --retries 3 poetry
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true

      - name: Load cached venv with timeout
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        timeout-minutes: 5

      - name: Update poetry lock file with retry
        timeout-minutes: 10
        run: |
          for i in {1..3}; do
            echo "üîÑ Attempt $i to update poetry lock file..."
            if timeout 300 poetry lock; then
              echo "‚úÖ Poetry lock successful on attempt $i"
              break
            elif [ $i -eq 3 ]; then
              echo "‚ö†Ô∏è Poetry lock failed after 3 attempts, continuing with existing lock file"
              break
            else
              echo "‚ùå Poetry lock failed on attempt $i, retrying in 30 seconds..."
              sleep 30
            fi
          done

      - name: Install dependencies with retry and emergency fallback
        timeout-minutes: 20
        run: |
          # Try poetry install first
          for i in {1..3}; do
            echo "üîÑ Attempt $i to install dependencies with poetry..."
            if timeout 600 poetry install --no-interaction --no-root; then
              echo "‚úÖ Poetry install successful on attempt $i"
              exit 0
            elif [ $i -eq 3 ]; then
              echo "‚ö†Ô∏è Poetry install failed after 3 attempts, trying emergency pip fallback..."
              break
            else
              echo "‚ùå Poetry install failed on attempt $i, retrying in 30 seconds..."
              sleep 30
            fi
          done

          # Emergency fallback to pip for tournament
          echo "üö® EMERGENCY: Falling back to pip installation for tournament..."
          python -m pip install --timeout 60 --retries 3 \
            pydantic requests python-dotenv pyyaml \
            openai anthropic httpx aiohttp \
            pytest pytest-asyncio beautifulsoup4 \
            numpy pandas matplotlib seaborn

          echo "‚úÖ Emergency dependencies installed - tournament can proceed"

      - name: Validate API keys
        run: |
          poetry run python -c "
          from src.infrastructure.config.api_keys import api_key_manager
          import sys
          validation = api_key_manager.validate_required_keys()
          api_key_manager.log_key_status()
          if not validation['valid']:
              print('‚ùå Missing required API keys:', [k['key'] for k in validation['missing_keys']])
              sys.exit(1)
          else:
              print('‚úÖ All required API keys are configured')
          "
        env:
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY || 'dummy_perplexity_key' }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY || 'dummy_exa_key' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy_openai_key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'dummy_anthropic_key' }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID || 'dummy_asknews_client' }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET || 'dummy_asknews_secret' }}

      - name: Display scheduling configuration
        run: |
          echo "üìÖ Tournament Scheduling Configuration:"
          echo "  Frequency: ${{ github.event.inputs.scheduling_frequency_hours || vars.SCHEDULING_FREQUENCY_HOURS || '4' }} hours"
          echo "  Mode: ${{ github.event.inputs.tournament_mode || 'normal' }}"
          echo "  Deadline-aware: ${{ vars.DEADLINE_AWARE_SCHEDULING || 'true' }}"
          echo "  Critical period frequency: ${{ vars.CRITICAL_PERIOD_FREQUENCY_HOURS || '2' }} hours"
          echo "  Final 24h frequency: ${{ vars.FINAL_24H_FREQUENCY_HOURS || '1' }} hours"
          echo "  Tournament scope: ${{ vars.TOURNAMENT_SCOPE || 'seasonal' }}"

      - name: Check budget status before run
        id: budget_check
        run: |
          echo "üí∞ Checking budget status before forecasting run..."
          BUDGET_LIMIT="${{ vars.BUDGET_LIMIT || '100' }}"
          CURRENT_SPEND="${{ vars.CURRENT_SPEND || '0.0' }}"

          # Simple budget calculation
          REMAINING=$(python -c "print(max(0, $BUDGET_LIMIT - $CURRENT_SPEND))")
          UTILIZATION=$(python -c "print($CURRENT_SPEND / $BUDGET_LIMIT if $BUDGET_LIMIT > 0 else 0)")

          if (( $(echo "$UTILIZATION >= 0.95" | bc -l) )); then
            STATUS="critical"
          elif (( $(echo "$UTILIZATION >= 0.80" | bc -l) )); then
            STATUS="warning"
          else
            STATUS="normal"
          fi

          echo "üí∞ Budget Status: $STATUS"
          echo "üí∏ Spent: \$$CURRENT_SPEND / \$$BUDGET_LIMIT"
          echo "üìä Utilization: $(python -c "print(f'{$UTILIZATION:.1%}')")"

          # Set outputs for workflow decisions
          echo "budget_status=$STATUS" >> $GITHUB_OUTPUT
          echo "budget_utilization=$UTILIZATION" >> $GITHUB_OUTPUT
          echo "budget_remaining=$REMAINING" >> $GITHUB_OUTPUT

          # Check if we should continue
          if (( $(echo "$UTILIZATION >= 0.98" | bc -l) )); then
            echo "üö® CRITICAL: Budget exhausted (98%+), suspending workflow"
            exit 1
          elif (( $(echo "$UTILIZATION >= 0.95" | bc -l) )); then
            echo "‚ö†Ô∏è WARNING: Budget critical (95%+), emergency mode activated"
          elif (( $(echo "$UTILIZATION >= 0.80" | bc -l) )); then
            echo "‚ö†Ô∏è CAUTION: Budget high (80%+), conservative mode activated"
          else
            echo "‚úÖ Budget status normal, proceeding with forecasting"
          fi
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Run bot with monitoring
        if: steps.budget_check.outputs.budget_utilization < '0.98'
        run: |
          echo "üöÄ Starting tournament forecasting bot..."
          echo "üí∞ Budget utilization: ${{ steps.budget_check.outputs.budget_utilization }}"
          echo "üíµ Budget remaining: ${{ steps.budget_check.outputs.budget_remaining }}"

          # Run with cost tracking
          poetry run python main.py
          echo "‚úÖ Tournament forecasting completed successfully"
        env:
          # Required API keys (must be configured in GitHub secrets)
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

          # Optional API keys (will use fallback if not configured)
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY || 'dummy_perplexity_key' }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY || 'dummy_exa_key' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy_openai_key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'dummy_anthropic_key' }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID || 'dummy_asknews_client' }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET || 'dummy_asknews_secret' }}

          # Bot configuration
          APP_ENV: production
          LOG_LEVEL: INFO
          DRY_RUN: false

          # Tournament configuration
          PUBLISH_REPORTS: true
          AIB_TOURNAMENT_ID: 32813
          TOURNAMENT_MODE: true

          # Budget management configuration
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}
          COST_TRACKING_ENABLED: true
          EMERGENCY_MODE_THRESHOLD: 0.95
          CONSERVATIVE_MODE_THRESHOLD: 0.80
          BUDGET_STATUS: ${{ steps.budget_check.outputs.budget_status }}

          # Tournament scheduling configuration
          SCHEDULING_FREQUENCY_HOURS: ${{ github.event.inputs.scheduling_frequency_hours || vars.SCHEDULING_FREQUENCY_HOURS || '4' }}
          DEADLINE_AWARE_SCHEDULING: ${{ vars.DEADLINE_AWARE_SCHEDULING || 'true' }}
          CRITICAL_PERIOD_FREQUENCY_HOURS: ${{ vars.CRITICAL_PERIOD_FREQUENCY_HOURS || '2' }}
          FINAL_24H_FREQUENCY_HOURS: ${{ vars.FINAL_24H_FREQUENCY_HOURS || '1' }}
          TOURNAMENT_SCOPE: ${{ vars.TOURNAMENT_SCOPE || 'seasonal' }}
          TOURNAMENT_MODE_INPUT: ${{ github.event.inputs.tournament_mode || 'normal' }}

          # Metaculus proxy configuration
          ENABLE_PROXY_CREDITS: true
          METACULUS_DEFAULT_MODEL: ${{ secrets.METACULUS_DEFAULT_MODEL || 'metaculus/claude-3-5-sonnet' }}
          METACULUS_SUMMARIZER_MODEL: ${{ secrets.METACULUS_SUMMARIZER_MODEL || 'metaculus/gpt-4o-mini' }}
          METACULUS_RESEARCH_MODEL: ${{ secrets.METACULUS_RESEARCH_MODEL || 'metaculus/gpt-4o' }}
          MAX_PROXY_REQUESTS: 1000

      - name: Generate cost reports
        if: always()
        run: |
          echo "üìä Generating comprehensive cost analysis reports..."
          export PYTHONPATH=$GITHUB_WORKSPACE
          poetry run python scripts/deployment_cost_monitor.py
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100.0' }}
          AIB_TOURNAMENT_ID: 32813
          CURRENT_SPEND: ${{ vars.CURRENT_SPEND || '0.0' }}
          QUESTIONS_PROCESSED: ${{ vars.QUESTIONS_PROCESSED || '1' }}

      - name: Check for budget alerts
        if: always() && steps.budget_check.outputs.budget_utilization >= '0.80'
        run: |
          echo "üö® Budget Alert Triggered!"
          echo "Current utilization: ${{ steps.budget_check.outputs.budget_utilization }}"
          echo "Remaining budget: ${{ steps.budget_check.outputs.budget_remaining }}"

          if (( $(echo "${{ steps.budget_check.outputs.budget_utilization }} >= 0.95" | bc -l) )); then
            echo "üî¥ CRITICAL ALERT: Budget utilization >= 95%"
            echo "Action required: Consider suspending automated runs"
          elif (( $(echo "${{ steps.budget_check.outputs.budget_utilization }} >= 0.80" | bc -l) )); then
            echo "üü° WARNING ALERT: Budget utilization >= 80%"
            echo "Action recommended: Monitor closely and consider conservative mode"
          fi

      - name: Monitor deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Tournament forecasting deployment successful"
            echo "üìä Monitoring: Bot executed without errors"
            echo "üí∞ Budget Status: ${{ steps.budget_check.outputs.budget_status }}"
            echo "üìà Budget Utilization: ${{ steps.budget_check.outputs.budget_utilization }}"
          else
            echo "‚ùå Tournament forecasting deployment failed"
            echo "üîç Check logs above for error details"

            # Check if failure was due to budget exhaustion
            if [ "${{ steps.budget_check.outputs.budget_utilization }}" != "" ]; then
              if (( $(echo "${{ steps.budget_check.outputs.budget_utilization }} >= 0.98" | bc -l) )); then
                echo "üí∏ Failure cause: Budget exhausted"
                echo "üõë Workflow suspended due to budget limits"
              fi
            fi
            exit 1
          fi

      - name: Upload cost report and logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: tournament-run-${{ github.run_number }}-${{ steps.budget_check.outputs.budget_status || 'unknown' }}
          path: |
            cost_report.json
            *.log
            logs/
          retention-days: 30

      - name: Budget exhaustion workflow suspension
        if: always() && steps.budget_check.outputs.budget_utilization >= '0.98'
        run: |
          echo "üö® CRITICAL: Budget exhausted, workflow should be suspended"
          echo "Current utilization: ${{ steps.budget_check.outputs.budget_utilization }}"
          echo "Remaining budget: ${{ steps.budget_check.outputs.budget_remaining }}"
          echo ""
          echo "üõë RECOMMENDED ACTIONS:"
          echo "1. Disable scheduled workflow runs"
          echo "2. Review cost optimization opportunities"
          echo "3. Consider increasing budget if tournament continues"
          echo "4. Switch to manual forecasting mode if needed"

          # This will cause the workflow to fail, preventing future scheduled runs
          # until the issue is addressed
          exit 1
