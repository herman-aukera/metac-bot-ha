name: Forecast on new AI tournament questions

on:
  workflow_dispatch:
    inputs:
      scheduling_frequency_hours:
        description: 'Override scheduling frequency in hours'
        required: false
        default: '4'
        type: string
      tournament_mode:
        description: 'Tournament operation mode'
        required: false
        default: 'normal'
        type: choice
        options:
          - normal
          - critical
          - final_24h
      tournament_id:
        description: 'Metaculus tournament ID to target (overrides default)'
        required: false
        type: string
      tournament_slug:
        description: 'Metaculus tournament slug (e.g., fall-aib-2025)'
        required: false
        type: string
  schedule:
    - cron: '0 */4 * * *' # Every 4 hours for sustainable tournament operation

concurrency:
  group: tournament-forecasting
  cancel-in-progress: true

jobs:
  tournament_forecast:
    runs-on: ubuntu-latest
    timeout-minutes: 30 # Prevent hanging workflows
    strategy:
      fail-fast: false # Continue even if one attempt fails
    env:
      # Make required secrets available to all steps
      METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
      # Optional (used if present)
      ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID }}
      ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: 🐍 Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: 🔧 Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: 📦 Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: 🔧 Install dependencies with enhanced fallback
        id: install-deps
        run: |
          set -e

          echo "🔍 Checking Python environment..."
          python --version
          pip --version

          echo "📦 Installing Poetry dependencies..."
          if poetry install --only main; then
            echo "✅ Poetry installation successful"
            POETRY_SUCCESS=true
          else
            echo "⚠️ Poetry install failed, trying with verbose output..."
            poetry install --only main -vvv
            if [ $? -eq 0 ]; then
              echo "✅ Poetry installation successful with verbose mode"
              POETRY_SUCCESS=true
            else
              echo "❌ Poetry install failed completely"
              POETRY_SUCCESS=false
            fi
          fi

          # Test if virtual environment is working
          if [ "$POETRY_SUCCESS" = "true" ]; then
            echo "🧪 Testing Poetry environment..."
            if poetry run python -c "import sys; print(f'Python: {sys.executable}')"; then
              echo "✅ Poetry environment is working"
            else
              echo "⚠️ Poetry environment test failed"
              POETRY_SUCCESS=false
            fi
          fi

          # Enhanced fallback with essential packages
          if [ "$POETRY_SUCCESS" = "false" ]; then
            echo "🔄 Falling back to direct pip installation..."
            pip install --upgrade pip
            pip install python-dotenv pydantic requests openai anthropic PyYAML forecasting-tools httpx aiofiles
            pip install -e .

            echo "🧪 Testing dotenv import..."
            python -c "import dotenv; print('✅ dotenv import successful')" || {
              echo "❌ dotenv import failed even after pip install"
              exit 1
            }

            echo "🧪 Testing forecasting_tools import..."
            python -c "import forecasting_tools; print('✅ forecasting_tools import successful')" || {
              echo "❌ forecasting_tools import failed even after pip install"
              exit 1
            }
          fi          echo "📋 Final package verification..."
          python -c "
          packages = ['dotenv', 'pydantic', 'requests', 'openai', 'forecasting_tools']
          for pkg in packages:
              try:
                  __import__(pkg)
                  print(f'✅ {pkg}: imported successfully')
              except ImportError as e:
                  print(f'❌ {pkg}: {e}')
          "

      - name: 🧪 Debug Python environment
        run: |
          echo "🔍 Python Environment Debug:"
          python --version
          python -c "import sys; print('Python executable:', sys.executable)"
          python -c "import sys; print('Python path:', sys.path)"
          echo "📦 Installed packages:"
          pip list | head -20

          echo "🧪 Testing critical imports:"
          python -c "
          import sys
          try:
              import dotenv
              print('✅ dotenv imported successfully')
          except ImportError as e:
              print(f'❌ Failed to import dotenv: {e}')
              sys.exit(1)
          "

      - name: 🎯 Run tournament forecasting bot
        id: run-bot
        env:
          # Tournament targeting (GitHub Variables)
          TOURNAMENT_ID: ${{ vars.AIB_TOURNAMENT_ID || '' }}
          TOURNAMENT_SLUG: ${{ vars.AIB_TOURNAMENT_SLUG || inputs.tournament_slug || '' }}
          # Optional config overrides
          SCHEDULING_FREQUENCY_HOURS: ${{ inputs.scheduling_frequency_hours || '4' }}
          TOURNAMENT_MODE: ${{ inputs.tournament_mode || 'normal' }}
        run: |
          set -e

          # Determine how to run Python
          if command -v poetry >/dev/null 2>&1 && poetry env info >/dev/null 2>&1; then
            echo "🚀 Running via Poetry..."
            PY_RUN="poetry run python"
          else
            echo "🐍 Running via direct Python..."
            PY_RUN="python"
            export PYTHONPATH="${PWD}/src:${PYTHONPATH:-}"
          fi

          echo "🎯 Starting tournament bot execution..."
          if $PY_RUN main.py; then
            echo "✅ Bot execution completed successfully"
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "❌ Bot execution failed"
            echo "success=false" >> "$GITHUB_OUTPUT"

            # Create fallback summary for failed executions
            cat > run_summary.json << EOF
          {
            "status": "failed",
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "error": "Bot execution failed during tournament forecasting",
            "workflow_run": "${{ github.run_id }}",
            "commit": "${{ github.sha }}"
          }
          EOF

            exit 1
          fi

      - name: 📊 Upload execution summary
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tournament-run-summary-${{ github.run_id }}
          path: run_summary.json
          retention-days: 30

      - name: 📁 Upload logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: tournament-logs-${{ github.run_id }}
          path: logs/
          retention-days: 7
