name: Forecast on Quarterly Cup

on:
  workflow_dispatch:
  # Automatic scheduling - runs at midnight every 2 days
  schedule:
    - cron: '0 0 */2 * *'

# Optimized concurrency control for quarterly cup scheduling
concurrency:
  group: quarterly-cup-forecasting
  cancel-in-progress: true # Cancel previous runs to avoid conflicts

# Job to run the quarterly cup forecast bot
jobs:
  quarterly_forecast:
    runs-on: ubuntu-latest
    timeout-minutes: 45 # Longer timeout for quarterly cup processing
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Validate Poetry configuration (no lock)
        run: |
          poetry --version
          poetry check || true

      - name: Install dependencies with retry and fallback
        run: |
          set -e
          echo "Attempting dependency installation via Poetry..."
          for i in {1..2}; do
            echo "Attempt $i"
            if poetry install --no-interaction --no-root; then
              echo "Poetry install successful"
              break
            elif [ $i -eq 2 ]; then
              echo "Poetry install failed after $i attempts; falling back to pip"
              python -m pip install --upgrade pip --timeout 60 --retries 3
              if [ -f requirements-emergency.txt ]; then
                python -m pip install --timeout 60 --retries 3 -r requirements-emergency.txt || true
              fi
              python -m pip install --timeout 60 --retries 3 \
                pydantic requests python-dotenv pyyaml openai httpx typer pytest || true
            else
              echo "Retrying in 15s..."
              sleep 15
            fi
          done

          # Configure portable Python runner
          if poetry env info >/dev/null 2>&1; then
            echo "PY_RUN=poetry run python" >> $GITHUB_ENV
            echo "🔧 Using Poetry environment"
          else
            echo "PY_RUN=python" >> $GITHUB_ENV
            echo "PYTHONPATH=$GITHUB_WORKSPACE/src" >> $GITHUB_ENV
            echo "🔧 Using system Python with PYTHONPATH"
          fi

          # Always ensure core dependencies are available
          python -m pip install --timeout 60 --retries 3 python-dotenv pydantic requests forecasting-tools httpx aiofiles || echo "Backup install failed but continuing"

      - name: Validate API keys
        run: |
          $PY_RUN -c "
          from src.infrastructure.config.api_keys import api_key_manager
          import sys
          validation = api_key_manager.validate_required_keys()
          api_key_manager.log_key_status()
          if not validation['valid']:
              print('❌ Missing required API keys:', [k['key'] for k in validation['missing_keys']])
              sys.exit(1)
          else:
              print('✅ All required API keys are configured')
          "
        env:
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY || 'dummy_perplexity_key' }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY || 'dummy_exa_key' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy_openai_key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'dummy_anthropic_key' }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID || 'dummy_asknews_client' }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET || 'dummy_asknews_secret' }}

      - name: Run bot with monitoring
        run: |
          echo "🚀 Starting quarterly cup forecasting bot..."

          # Debug Python environment
          echo "🔍 Python environment debug:"
          echo "PYTHONPATH: $PYTHONPATH"
          echo "PY_RUN: $PY_RUN"
          python --version
          python -m pip list | grep -E "(dotenv|pydantic|requests)" || echo "Core packages not found"

          # Test dotenv import specifically
          echo "🧪 Testing dotenv import:"
          python -c "import dotenv; print('✅ dotenv import successful')" || echo "❌ dotenv import failed"

          # Run quarterly cup bot
          echo "🚀 Executing main.py for quarterly cup..."
          $PY_RUN main.py --mode quarterly_cup
          echo "✅ Quarterly cup forecasting completed successfully"
        env:
          # Required API keys (must be configured in GitHub secrets)
          METACULUS_TOKEN: ${{ secrets.METACULUS_TOKEN }}
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}

          # Optional API keys (will use fallback if not configured)
          PERPLEXITY_API_KEY: ${{ secrets.PERPLEXITY_API_KEY || 'dummy_perplexity_key' }}
          EXA_API_KEY: ${{ secrets.EXA_API_KEY || 'dummy_exa_key' }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY || 'dummy_openai_key' }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY || 'dummy_anthropic_key' }}
          ASKNEWS_CLIENT_ID: ${{ secrets.ASKNEWS_CLIENT_ID || 'dummy_asknews_client' }}
          ASKNEWS_SECRET: ${{ secrets.ASKNEWS_SECRET || 'dummy_asknews_secret' }}

          # Bot configuration
          APP_ENV: production
          LOG_LEVEL: INFO
          DRY_RUN: false

      - name: Show run summary (if present)
        if: always()
        run: |
          if [ -f run_summary.json ]; then
            echo "📄 Run Summary:"
            cat run_summary.json
          else
            echo "ℹ️ run_summary.json not found, creating fallback summary..."
            cat > run_summary.json << 'JSON'
{
  "run_mode": "quarterly_cup",
  "tournament_mode": "false",
  "tournament_id": "",
  "publish_reports": "true",
  "successful_forecasts": 0,
  "failed_forecasts": 0,
  "total_processed": 0,
  "status": "failed",
  "reason": "Bot execution failed - check logs for details"
}
JSON
            echo "📄 Fallback Summary Created:"
            cat run_summary.json
          fi

      - name: Monitor deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Quarterly cup forecasting deployment successful"
            echo "📊 Monitoring: Bot executed without errors"
          else
            echo "❌ Quarterly cup forecasting deployment failed"
            echo "🔍 Check logs above for error details"
            exit 1
          fi

      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: quarterly-cup-logs-${{ github.run_number }}
          path: |
            *.log
            logs/
          retention-days: 7

      - name: Upload run artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: quarterly-cup-run-${{ github.run_number }}
          path: |
            run_summary.json
            *.log
            logs/
          retention-days: 14
