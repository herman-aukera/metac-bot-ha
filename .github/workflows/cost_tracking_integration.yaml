name: Cost Tracking Integration

on:
  schedule:
    # Run cost tracking every 2 hours during active periods
    - cron: '0 */2 * * *'
  workflow_dispatch:
    inputs:
      force_suspension_check:
        description: 'Force check for workflow suspension requirements'
        required: false
        default: 'true'
        type: boolean
      generate_detailed_report:
        description: 'Generate detailed cost analysis report'
        required: false
        default: 'false'
        type: boolean

concurrency:
  group: cost-tracking-integration
  cancel-in-progress: false

jobs:
  cost_tracking:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      should_suspend: ${{ steps.suspension_check.outputs.should_suspend }}
      budget_status: ${{ steps.cost_analysis.outputs.budget_status }}
      utilization: ${{ steps.cost_analysis.outputs.utilization }}
      alert_level: ${{ steps.cost_analysis.outputs.alert_level }}

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Update poetry lock file
        run: poetry lock --no-update

      - name: Install dependencies
        run: poetry install --no-interaction --no-root

      - name: Run cost analysis
        id: cost_analysis
        run: |
          echo "📊 Running comprehensive cost analysis..."

          # Run the monitoring script with JSON output
          REPORT=$(poetry run python scripts/deployment_cost_monitor.py --json-output)

          # Extract key metrics
          BUDGET_STATUS=$(echo "$REPORT" | jq -r '.budget_status.status')
          UTILIZATION=$(echo "$REPORT" | jq -r '.budget_status.utilization')
          ALERT_LEVEL=$(echo "$REPORT" | jq -r '.alert_level')
          SPENT=$(echo "$REPORT" | jq -r '.budget_status.spent')
          REMAINING=$(echo "$REPORT" | jq -r '.budget_status.remaining')

          # Set outputs
          echo "budget_status=$BUDGET_STATUS" >> $GITHUB_OUTPUT
          echo "utilization=$UTILIZATION" >> $GITHUB_OUTPUT
          echo "alert_level=$ALERT_LEVEL" >> $GITHUB_OUTPUT
          echo "spent=$SPENT" >> $GITHUB_OUTPUT
          echo "remaining=$REMAINING" >> $GITHUB_OUTPUT

          # Save full report
          echo "$REPORT" > cost_analysis_report.json

          echo "💰 Cost Analysis Results:"
          echo "  Status: $BUDGET_STATUS"
          echo "  Utilization: $(echo "$UTILIZATION * 100" | bc -l | cut -d. -f1)%"
          echo "  Alert Level: $ALERT_LEVEL"
          echo "  Spent: $${SPENT}"
          echo "  Remaining: $${REMAINING}"
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Check workflow suspension requirements
        id: suspension_check
        run: |
          echo "🔍 Checking if workflows should be suspended..."

          # Use the monitoring script to check suspension requirements
          if poetry run python scripts/deployment_cost_monitor.py --check-suspension --json-output; then
            SHOULD_SUSPEND="false"
            echo "✅ Budget allows continued operation"
          else
            SHOULD_SUSPEND="true"
            echo "🚨 Budget exhausted - workflows should be suspended"
          fi

          echo "should_suspend=$SHOULD_SUSPEND" >> $GITHUB_OUTPUT
          echo "Should suspend workflows: $SHOULD_SUSPEND"
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Generate detailed cost report
        if: github.event.inputs.generate_detailed_report == 'true' || steps.cost_analysis.outputs.alert_level != 'normal'
        run: |
          echo "📋 Generating detailed cost and efficiency report..."

          # Generate comprehensive reports
          poetry run python scripts/deployment_cost_monitor.py --cost-analysis --json-output > cost_efficiency_report.json
          poetry run python scripts/deployment_cost_monitor.py --workflow-recommendations --json-output > workflow_recommendations.json

          # Display summary
          echo "📊 DETAILED COST ANALYSIS"
          echo "========================"
          poetry run python scripts/deployment_cost_monitor.py --cost-analysis

          echo ""
          echo "🔧 WORKFLOW RECOMMENDATIONS"
          echo "==========================="
          poetry run python scripts/deployment_cost_monitor.py --workflow-recommendations
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Cost per run tracking
        run: |
          echo "📈 Tracking cost per workflow run..."

          # Calculate cost per run metrics
          CURRENT_RUN_COST=$(poetry run python -c "
          from src.infrastructure.config.budget_manager import BudgetManager
          import os

          budget_manager = BudgetManager(budget_limit=float(os.getenv('BUDGET_LIMIT', '100')))
          status = budget_manager.get_budget_status()

          # Estimate cost for this monitoring run (minimal)
          monitoring_cost = 0.001  # Estimated cost for monitoring operations

          print(f'{monitoring_cost:.6f}')
          ")

          echo "💲 Current monitoring run cost: $${CURRENT_RUN_COST}"
          echo "📊 Total budget utilization: ${{ steps.cost_analysis.outputs.utilization }}"
          echo "💰 Remaining budget: ${{ steps.cost_analysis.outputs.remaining }}"

          # Log cost tracking data
          cat > cost_tracking_entry.json << EOF
          {
            "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "workflow_run": "${{ github.run_number }}",
            "run_type": "cost_tracking",
            "estimated_cost": $CURRENT_RUN_COST,
            "budget_status": "${{ steps.cost_analysis.outputs.budget_status }}",
            "utilization": ${{ steps.cost_analysis.outputs.utilization }},
            "alert_level": "${{ steps.cost_analysis.outputs.alert_level }}"
          }
          EOF

          echo "📄 Cost tracking entry saved"
        env:
          BUDGET_LIMIT: ${{ vars.BUDGET_LIMIT || '100' }}

      - name: Upload cost tracking reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cost-tracking-${{ github.run_number }}-${{ steps.cost_analysis.outputs.budget_status }}
          path: |
            cost_analysis_report.json
            cost_efficiency_report.json
            workflow_recommendations.json
            cost_tracking_entry.json
          retention-days: 90

      - name: Cost tracking summary
        if: always()
        run: |
          echo "📊 COST TRACKING SUMMARY"
          echo "========================"
          echo "🕐 Tracking Time: $(date -u)"
          echo "💰 Budget Status: ${{ steps.cost_analysis.outputs.budget_status }}"
          echo "📊 Utilization: $(echo "${{ steps.cost_analysis.outputs.utilization }} * 100" | bc -l | cut -d. -f1)%"
          echo "🚨 Alert Level: ${{ steps.cost_analysis.outputs.alert_level }}"
          echo "🛑 Should Suspend: ${{ steps.suspension_check.outputs.should_suspend }}"
          echo "💸 Amount Spent: ${{ steps.cost_analysis.outputs.spent }}"
          echo "💵 Remaining: ${{ steps.cost_analysis.outputs.remaining }}"
          echo ""
          echo "📄 Detailed reports uploaded as workflow artifacts"

  automatic_workflow_management:
    needs: cost_tracking
    if: needs.cost_tracking.outputs.should_suspend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Trigger workflow suspension
        run: |
          echo "🚨 CRITICAL: Triggering automatic workflow suspension"
          echo "Budget Status: ${{ needs.cost_tracking.outputs.budget_status }}"
          echo "Utilization: ${{ needs.cost_tracking.outputs.utilization }}"
          echo "Alert Level: ${{ needs.cost_tracking.outputs.alert_level }}"

          # Trigger the workflow management workflow to suspend all tournament workflows
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/workflow_management.yaml/dispatches" \
            -d '{
              "ref": "main",
              "inputs": {
                "action": "suspend_all",
                "reason": "Automatic suspension due to budget exhaustion (utilization: ${{ needs.cost_tracking.outputs.utilization }})"
              }
            }'

          echo "✅ Workflow suspension request sent"

      - name: Create budget exhaustion issue
        run: |
          echo "📝 Creating GitHub issue for budget exhaustion..."

          # Create an issue to track the budget exhaustion
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues" \
            -d '{
              "title": "🚨 CRITICAL: Budget Exhausted - Workflows Suspended",
              "body": "## Budget Exhaustion Alert\n\n**Timestamp:** $(date -u)\n**Budget Status:** ${{ needs.cost_tracking.outputs.budget_status }}\n**Utilization:** ${{ needs.cost_tracking.outputs.utilization }}\n**Alert Level:** ${{ needs.cost_tracking.outputs.alert_level }}\n\n### Actions Taken\n- [x] Automatic workflow suspension triggered\n- [x] Cost tracking reports generated\n- [x] Alert issue created\n\n### Required Actions\n- [ ] Review cost optimization opportunities\n- [ ] Consider budget increase if tournament participation is critical\n- [ ] Manually manage critical forecasting deadlines\n- [ ] Update budget limits and resume workflows when ready\n\n### Reports\nCheck the latest workflow artifacts for detailed cost analysis and recommendations.\n\n**Workflow Run:** ${{ github.run_number }}\n**Repository:** ${{ github.repository }}",
              "labels": ["critical", "budget", "automation"]
            }'

          echo "✅ Budget exhaustion issue created"

  alert_notifications:
    needs: cost_tracking
    if: needs.cost_tracking.outputs.alert_level != 'normal'
    runs-on: ubuntu-latest
    steps:
      - name: Send budget alert notification
        run: |
          echo "🚨 BUDGET ALERT NOTIFICATION"
          echo "Alert Level: ${{ needs.cost_tracking.outputs.alert_level }}"
          echo "Budget Status: ${{ needs.cost_tracking.outputs.budget_status }}"
          echo "Utilization: ${{ needs.cost_tracking.outputs.utilization }}"
          echo "Should Suspend: ${{ needs.cost_tracking.outputs.should_suspend }}"

          if [ "${{ needs.cost_tracking.outputs.alert_level }}" == "critical" ]; then
            echo "🔴 CRITICAL ALERT: Immediate action required"
            echo "Workflows will be suspended automatically"
          elif [ "${{ needs.cost_tracking.outputs.alert_level }}" == "warning" ]; then
            echo "🟡 WARNING ALERT: High budget utilization detected"
            echo "Monitor closely and consider conservative mode"
          fi

          echo "📊 Check workflow artifacts for detailed analysis"
          echo "🔧 Use workflow_management.yaml for manual control"
