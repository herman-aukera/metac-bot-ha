[tool.poetry]
name = "metaculus-bot-ha"
version = "0.1.0"
description = "Production-ready AI forecasting bot for Metaculus AI Forecasting Benchmark"
authors = ["Herman <herman@example.com>"]
readme = "README.md"
package-mode = false

[tool.poetry.dependencies]
python = "^3.11"
python-decouple = "^3.8"
requests = "^2.32.4"
asknews = "^0.11.6"
numpy = "^2.2.0"
openai = "^1.57.4"
python-dotenv = "^1.0.1"
forecasting-tools = "^0.2.23"
pydantic = "^2.8.0"
typer = "^0.12.0"
rich = "^13.7.0"
structlog = "^24.2.0"
httpx = "^0.27.0"
aiofiles = "^24.1.0"
pandas = "^2.2.0"
scipy = "^1.14.0"
matplotlib = "^3.9.0"
seaborn = "^0.13.0"
plotly = "^5.22.0"
pyyaml = "^6.0.1"
jinja2 = "^3.1.4"
tenacity = "^9.0.0"
click = "^8.1.7"
tiktoken = "^0.8.0"

[tool.poetry.group.dev.dependencies]
ipykernel = "^6.29.5"
pytest = "^8.2.0"
pytest-asyncio = "^1.0.0"
pytest-cov = "^5.0.0"
black = "^24.4.0"
isort = "^5.13.0"
flake8 = "^7.1.0"
mypy = "^1.10.0"
pre-commit = "^3.7.0"
bandit = "^1.7.9"

[tool.poetry.group.test.dependencies]
factory-boy = "^3.3.0"
faker = "^37.0.1"
responses = "^0.25.0"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
disallow_untyped_defs = true
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "e2e: End-to-end tests",
    "slow: Slow tests",
    "external: Tests that require external services",
    "asyncio: Tests that use asyncio",
]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/env/*",
    "*/site-packages/*",
    "*/migrations/*",
]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
skip_covered = false
sort = "Cover"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
