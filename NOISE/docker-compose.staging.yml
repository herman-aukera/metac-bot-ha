version: '3.8'

services:
  forecasting-bot:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ai-forecasting-bot-staging
    restart: unless-stopped
    environment:
      - APP_ENV=staging
      - LOG_LEVEL=DEBUG
      - METRICS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
    env_file:
      - .env.staging
    ports:
      - '8080:8080'
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
      - ./config:/app/config:ro
    networks:
      - forecasting-network-staging
    depends_on:
      - prometheus-staging
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8080/health']
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  prometheus-staging:
    image: prom/prometheus:latest
    container_name: prometheus-staging
    restart: unless-stopped
    ports:
      - '9091:9090'
    volumes:
      - ./monitoring/prometheus.staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=72h'
      - '--web.enable-lifecycle'
    networks:
      - forecasting-network-staging

  grafana-staging:
    image: grafana/grafana:latest
    container_name: grafana-staging
    restart: unless-stopped
    ports:
      - '3001:3000'
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=staging
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - forecasting-network-staging

networks:
  forecasting-network-staging:
    driver: bridge

volumes:
  prometheus_staging_data:
  grafana_staging_data:
